//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GCAnalyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GCAnalyzer.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit garbage collection can cause performance issues and should be avoided in most cases..
        /// </summary>
        public static string AvoidUsingGCCollectDescription {
            get {
                return ResourceManager.GetString("AvoidUsingGCCollectDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using GC.Collect directly as it can impact performance.
        /// </summary>
        public static string AvoidUsingGCCollectMessageFormat {
            get {
                return ResourceManager.GetString("AvoidUsingGCCollectMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using GC.Collect directly.
        /// </summary>
        public static string AvoidUsingGCCollectTitle {
            get {
                return ResourceManager.GetString("AvoidUsingGCCollectTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance fields should follow the naming convention of starting with an underscore (_) followed by camelCase..
        /// </summary>
        public static string FieldNamingConventionDescription {
            get {
                return ResourceManager.GetString("FieldNamingConventionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; should be named with an underscore prefix followed by camelCase: &apos;_variableName&apos;.
        /// </summary>
        public static string FieldNamingConventionMessageFormat {
            get {
                return ResourceManager.GetString("FieldNamingConventionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use underscore prefix for instance fields.
        /// </summary>
        public static string FieldNamingConventionTitle {
            get {
                return ResourceManager.GetString("FieldNamingConventionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface methods should define contracts without implementation details like exceptions. Exception handling should be part of the implementation, not the interface..
        /// </summary>
        public static string InterfaceMethodNoExceptionsDescription {
            get {
                return ResourceManager.GetString("InterfaceMethodNoExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface method &apos;{0}&apos; should not throw exceptions.
        /// </summary>
        public static string InterfaceMethodNoExceptionsMessageFormat {
            get {
                return ResourceManager.GetString("InterfaceMethodNoExceptionsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface methods should not throw exceptions.
        /// </summary>
        public static string InterfaceMethodNoExceptionsTitle {
            get {
                return ResourceManager.GetString("InterfaceMethodNoExceptionsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that implement IDisposable should have their Dispose method called when they are no longer needed..
        /// </summary>
        public static string ProperResourceDisposalDescription {
            get {
                return ResourceManager.GetString("ProperResourceDisposalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; implements IDisposable but is not being disposed.
        /// </summary>
        public static string ProperResourceDisposalMessageFormat {
            get {
                return ResourceManager.GetString("ProperResourceDisposalMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement proper resource disposal.
        /// </summary>
        public static string ProperResourceDisposalTitle {
            get {
                return ResourceManager.GetString("ProperResourceDisposalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In some scenarios, objects might be collected prematurely if they&apos;re not referenced elsewhere in the code..
        /// </summary>
        public static string UseGCKeepAliveDescription {
            get {
                return ResourceManager.GetString("UseGCKeepAliveDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using GC.KeepAlive for object &apos;{0}&apos; to prevent premature collection.
        /// </summary>
        public static string UseGCKeepAliveMessageFormat {
            get {
                return ResourceManager.GetString("UseGCKeepAliveMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using GC.KeepAlive.
        /// </summary>
        public static string UseGCKeepAliveTitle {
            get {
                return ResourceManager.GetString("UseGCKeepAliveTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hardcoded string literals can make code less maintainable and harder to localize. Use constants, resource files, or configuration values instead..
        /// </summary>
        public static string AvoidHardcodedStringsDescription {
            get {
                return ResourceManager.GetString("AvoidHardcodedStringsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using string constants or resources instead of hardcoded string: "{0}".
        /// </summary>
        public static string AvoidHardcodedStringsMessageFormat {
            get {
                return ResourceManager.GetString("AvoidHardcodedStringsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid hardcoded string literals.
        /// </summary>
        public static string AvoidHardcodedStringsTitle {
            get {
                return ResourceManager.GetString("AvoidHardcodedStringsTitle", resourceCulture);
            }
        }
    }
} 